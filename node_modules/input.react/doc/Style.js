'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var InputReact = require('input.react');

var Input = function (_React$Component) {
    _inherits(Input, _React$Component);

    function Input() {
        _classCallCheck(this, Input);

        return _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
    }

    _createClass(Input, [{
        key: 'render',
        value: function render() {
            var self = this;
            var themes = (typeof self.props.themes === 'undefined' ? '' : self.props.themes) + ' cute';
            return require("react").createElement(InputReact, _extends({}, self.props, { themes: themes }));
        }
    }]);

    return Input;
}(React.Component);

var Style = function (_React$Component2) {
    _inherits(Style, _React$Component2);

    function Style() {
        _classCallCheck(this, Style);

        return _possibleConstructorReturn(this, (Style.__proto__ || Object.getPrototypeOf(Style)).apply(this, arguments));
    }

    _createClass(Style, [{
        key: 'render',
        value: function render() {
            var self = this;
            return require("react").createElement(
                'div',
                null,
                require("react").createElement(Input, null),
                require("react").createElement('hr', null),
                require("react").createElement(Input, { append: '@icon-setting', prepend: '@icon-user' }),
                require("react").createElement('hr', null),
                require("react").createElement(Input, { type: 'textarea' }),
                require("react").createElement('hr', null),
                require("react").createElement(Input, { search: true }),
                require("react").createElement('hr', null)
            );
        }
    }]);

    return Style;
}(React.Component);
/*ONFACE-DEL*/

Style = require("react-hot-loader").hot(module)(Style);
module.exports = Style;