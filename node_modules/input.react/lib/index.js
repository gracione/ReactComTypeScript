"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _safeExtend = require("safe-extend");

var _safeExtend2 = _interopRequireDefault(_safeExtend);

var _util = require("util.react");

var _util2 = _interopRequireDefault(_util);

var _icon = require("icon.react");

var _icon2 = _interopRequireDefault(_icon);

var _sparejs = require("sparejs");

var _sparejs2 = _interopRequireDefault(_sparejs);

var _reactDefaultvalue = require("react-defaultvalue");

var _reactDefaultvalue2 = _interopRequireDefault(_reactDefaultvalue);

var _reactComposition = require("react-composition");

var _reactComposition2 = _interopRequireDefault(_reactComposition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

require('./index.css');
function transIcon(attr) {
    var iconPrefixRule = /^\@icon-/;
    if (typeof attr === 'string' && iconPrefixRule.test(attr)) {
        return require("react").createElement(_icon2.default, { type: attr.replace(iconPrefixRule, '') });
    }
    return attr;
}

var Input = function (_Component) {
    _inherits(Input, _Component);

    function Input(props) {
        _classCallCheck(this, Input);

        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

        var self = _this;
        _this.state = {
            focused: false,
            searchClicked: false,
            inputValue: '',
            compositionValue: props.value,
            composition: false
        };
        return _this;
    }

    _createClass(Input, [{
        key: "render",
        value: function render() {
            var _this2 = this;

            var self = this;
            var fullOutline = self.props.fullOutline;
            if (self.props.search && typeof fullOutline === 'undefined') {
                fullOutline = true;
            }
            var rootClassName = [self.props.prefixClassName, self.props.append ? self.props.prefixClassName + "--append" : '', self.props.prepend ? self.props.prefixClassName + "--prepend" : '', self.props.error ? self.props.prefixClassName + "--error" : '', self.props.search ? self.props.prefixClassName + "--search" : '', self.state.focused ? self.props.prefixClassName + "--focus" : '', fullOutline ? self.props.prefixClassName + "--full-outline" : '', _util2.default.themes(self.props)].join(' ');
            var prefixClassName = self.props.prefixClassName;
            var iconPrefixRule = /^\@icon-/;
            var appendNode = self.props.append;
            if (self.props.search && typeof appendNode === 'undefined') {
                appendNode = '@icon-search';
            }
            appendNode = transIcon(appendNode);
            var prependNode = transIcon(self.props.prepend);
            var btnNode = transIcon(self.props.button);

            var attrProps = (0, _safeExtend2.default)(true, {}, self.props);
            var removeProps = ['defaultValue', 'prefixClassName', 'placeholder', 'append', 'prepend', 'error', 'search', 'focused', 'fullOutline', 'forwardedref'];
            removeProps.forEach(function (attr) {
                delete attrProps[attr];
            });
            var inputTextareaProps = {
                ref: self.props.forwardedref || "input",
                className: prefixClassName + "-form-" + (self.props.type === 'textarea' ? 'textarea' : 'input'),
                value: self.props.value,
                onFocus: function onFocus() {
                    if (typeof self.props.onFocus === 'function') {
                        for (var _len = arguments.length, arg = Array(_len), _key = 0; _key < _len; _key++) {
                            arg[_key] = arguments[_key];
                        }

                        self.props.onFocus.apply(null, arg);
                    }
                    self.setState({
                        focused: true
                    });
                },
                onBlur: function onBlur() {
                    if (typeof self.props.onBlur === 'function') {
                        for (var _len2 = arguments.length, arg = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            arg[_key2] = arguments[_key2];
                        }

                        self.props.onBlur.apply(null, arg);
                    }
                    self.setState({
                        focused: false
                    });
                },
                onChange: self.props.onChange || function (e) {
                    self.setState({
                        inputValue: e.target.value
                    });
                }
            };
            if (self.props.type === 'textarea') {
                delete attrProps.type;
            }
            inputTextareaProps = (0, _safeExtend2.default)(true, attrProps, inputTextareaProps);
            var compositionProps = (0, _reactComposition2.default)({
                onChange: function onChange() {
                    for (var _len3 = arguments.length, arg = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                        arg[_key3] = arguments[_key3];
                    }

                    var event = arg[0];
                    self.setState({
                        compositionValue: event.target.value
                    });
                    if (!self.props.composition && event.reactComposition.composition) {
                        return;
                    }
                    if (typeof inputTextareaProps.onChange === 'function') {
                        inputTextareaProps.onChange.apply(undefined, arg);
                    }
                },
                onCompositionStart: function onCompositionStart() {
                    if (typeof inputTextareaProps.onCompositionStart === 'function') {
                        for (var _len4 = arguments.length, arg = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            arg[_key4] = arguments[_key4];
                        }

                        inputTextareaProps.onCompositionStart.apply(undefined, arg);
                    }
                    self.setState({
                        composition: true
                    });
                },
                onCompositionUpdate: function onCompositionUpdate() {
                    if (typeof inputTextareaProps.onCompositionUpdate === 'function') {
                        for (var _len5 = arguments.length, arg = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                            arg[_key5] = arguments[_key5];
                        }

                        inputTextareaProps.onCompositionUpdate.apply(undefined, arg);
                    }
                },
                onCompositionEnd: function onCompositionEnd() {
                    if (typeof inputTextareaProps.onCompositionEnd === 'function') {
                        for (var _len6 = arguments.length, arg = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                            arg[_key6] = arguments[_key6];
                        }

                        inputTextareaProps.onCompositionEnd.apply(undefined, arg);
                    }
                    console.log('end');
                    self.setState({
                        composition: false
                    });
                }
            });
            var inputValue = (0, _sparejs2.default)(self.props, 'value', '');
            if (!inputValue) {
                inputValue = self.state.inputValue;
            }
            if (self.state.composition) {
                inputTextareaProps.value = self.state.compositionValue;
            }
            return require("react").createElement(
                "div",
                {
                    ref: "root",
                    className: rootClassName
                },
                require("react").createElement(
                    "div",
                    { className: prefixClassName + "-inner" },
                    prependNode ? require("react").createElement(
                        "span",
                        { className: prefixClassName + "-prepend" },
                        require("react").createElement(
                            "span",
                            { className: prefixClassName + "-prepend-wrap" },
                            require("react").createElement(
                                "span",
                                { className: prefixClassName + "-prepend-wrap-content" },
                                prependNode
                            )
                        )
                    ) : null,
                    require("react").createElement(
                        "div",
                        { className: prefixClassName + "-form" },
                        inputValue ? null : require("react").createElement(
                            "div",
                            {
                                className: prefixClassName + "-form-placeholder",
                                onClick: function onClick() {
                                    _this2.refs.input.focus();
                                }
                            },
                            self.props.placeholder
                        ),
                        self.props.type === 'textarea' ? require("react").createElement("textarea", _extends({}, inputTextareaProps, compositionProps)) : require("react").createElement("input", _extends({}, inputTextareaProps, compositionProps))
                    ),
                    appendNode ? require("react").createElement(
                        "span",
                        { className: prefixClassName + "-append" },
                        require("react").createElement(
                            "span",
                            { className: prefixClassName + "-append-wrap" },
                            require("react").createElement(
                                "span",
                                { className: prefixClassName + "-append-wrap-content" },
                                self.props.search ? require("react").createElement(
                                    "button",
                                    {
                                        type: "submit",
                                        className: prefixClassName + "-append-wrap-content-search " + (self.state.searchClicked ? prefixClassName + "-append-wrap-content-search--clicked" : ''),
                                        onClick: function onClick() {
                                            self.setState({
                                                searchClicked: false
                                            }, function () {
                                                setTimeout(function () {
                                                    self.setState({
                                                        searchClicked: true
                                                    });
                                                }, 10);
                                            });
                                        }
                                    },
                                    appendNode
                                ) : appendNode
                            )
                        )
                    ) : null
                )
            );
        }
    }]);

    return Input;
}(_react.Component);

require('./props').default(Input);
Input = (0, _reactDefaultvalue2.default)(Input);

var loopForward = function loopForward(WarpComponent) {
    return _react2.default.forwardRef(function (props, ref) {
        return require("react").createElement(WarpComponent, _extends({ forwardedref: ref }, props));
    });
};
Input = loopForward(Input);

Input.Group = require('./InputGroup');
exports.default = Input;

module.exports = Input;