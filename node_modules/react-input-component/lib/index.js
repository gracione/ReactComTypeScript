'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Input = exports.Select = exports.TextArea = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var checkables = ['checkbox', 'radio'];
var ReactComponent = _react2.default.PureComponent || _react2.default.Component;

var stringOrNumber = _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]);

function createComponent(Component, displayName) {
	var detectIsCheckable = function detectIsCheckable(props) {
		return Component === 'input' && checkables.indexOf(props.type) > -1;
	};

	var InputComponent = function (_ReactComponent) {
		_inherits(InputComponent, _ReactComponent);

		function InputComponent() {
			_classCallCheck(this, InputComponent);

			return _possibleConstructorReturn(this, (InputComponent.__proto__ || Object.getPrototypeOf(InputComponent)).apply(this, arguments));
		}

		_createClass(InputComponent, [{
			key: 'componentDidUpdate',
			value: function componentDidUpdate(prevProps) {
				var props = this.props;

				var isCheckable = detectIsCheckable(props);
				var key = isCheckable ? 'checked' : 'value';
				var val = props[key];
				if (props.updateKey !== prevProps.updateKey || prevProps[key] !== val) {
					this.dom[key] = val;
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;

				var _props = this.props,
				    updateKey = _props.updateKey,
				    value = _props.value,
				    checked = _props.checked,
				    other = _objectWithoutProperties(_props, ['updateKey', 'value', 'checked']);

				var isCheckable = detectIsCheckable(other);
				var key = isCheckable ? 'defaultChecked' : 'defaultValue';
				var val = isCheckable ? checked : value;
				var attrs = _defineProperty({}, key, val);

				return _react2.default.createElement(Component, _extends({}, other, attrs, {
					ref: function ref(dom) {
						return _this2.dom = dom;
					}
				}));
			}
		}]);

		return InputComponent;
	}(ReactComponent);

	InputComponent.propTypes = {
		value: stringOrNumber,
		checked: _propTypes2.default.bool,
		type: _propTypes2.default.string,
		updateKey: stringOrNumber
	};
	InputComponent.displayName = displayName;


	return InputComponent;
}

var TextArea = exports.TextArea = createComponent('textarea', 'TextArea');
var Select = exports.Select = createComponent('select', 'Select');
var Input = exports.Input = createComponent('input', 'Input');
exports.default = Input;