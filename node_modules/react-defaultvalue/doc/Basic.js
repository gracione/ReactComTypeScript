'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var reactDefaultValue = require('react-defaultvalue');

var Count = function (_React$Component) {
    _inherits(Count, _React$Component);

    function Count() {
        _classCallCheck(this, Count);

        return _possibleConstructorReturn(this, (Count.__proto__ || Object.getPrototypeOf(Count)).apply(this, arguments));
    }

    _createClass(Count, [{
        key: 'render',
        value: function render() {
            var self = this;
            return require("react").createElement(
                'button',
                { onClick: function onClick() {
                        if (typeof self.props.onChange === 'function' && typeof self.props.value === 'number') {
                            self.props.onChange(self.props.value + 1);
                        }
                    } },
                self.props.value
            );
        }
    }]);

    return Count;
}(React.Component);

Count = reactDefaultValue(Count);

var Basic = function (_React$Component2) {
    _inherits(Basic, _React$Component2);

    function Basic(props) {
        _classCallCheck(this, Basic);

        var _this2 = _possibleConstructorReturn(this, (Basic.__proto__ || Object.getPrototypeOf(Basic)).call(this, props));

        _this2.state = {
            value: 1
        };
        return _this2;
    }

    _createClass(Basic, [{
        key: 'render',
        value: function render() {
            var self = this;
            return require("react").createElement(
                'div',
                { className: 'basicDemo' },
                require("react").createElement(Count, { defaultValue: 20 }),
                require("react").createElement('hr', null),
                require("react").createElement(Count, {
                    value: self.state.value,
                    onChange: function onChange(value) {
                        self.setState({
                            value: value
                        });
                    }
                })
            );
        }
    }]);

    return Basic;
}(React.Component);
/*ONFACE-DEL*/

Basic = require("react-hot-loader").hot(module)(Basic);
module.exports = Basic;