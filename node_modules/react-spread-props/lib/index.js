"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _possibleStandardNames = require("./possibleStandardNames");

var _possibleStandardNames2 = _interopRequireDefault(_possibleStandardNames);

var _safeExtend = require("safe-extend");

var _safeExtend2 = _interopRequireDefault(_safeExtend);

var _getDeafultSettings = require("./getDeafultSettings");

var _getDeafultSettings2 = _interopRequireDefault(_getDeafultSettings);

var _eventName = require("./eventName");

var _eventName2 = _interopRequireDefault(_eventName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var nameKeys = Object.keys(_possibleStandardNames2.default);
// Object.values is es7
var reactNameKeys = nameKeys.map(function (key) {
    return _possibleStandardNames2.default[key];
});
var allKeys = nameKeys.concat(reactNameKeys);

var eventNameKeys = Object.keys(_eventName2.default);
function reactSpreadProps(props, extendProps, settings) {
    settings = (0, _safeExtend2.default)(true, (0, _getDeafultSettings2.default)(), settings);
    extendProps = (0, _safeExtend2.default)(true, {}, extendProps);
    var output = _safeExtend2.default.clone(props);
    Object.keys(extendProps).forEach(function (extendKey) {
        var extendValue = extendProps[extendKey];
        switch (typeof extendValue === "undefined" ? "undefined" : _typeof(extendValue)) {
            case 'string':
                output[extendKey] = output[extendKey] || '';
                if (extendKey === 'className') {
                    output[extendKey] = extendValue + ' ' + output[extendKey];
                } else {
                    output[extendKey] = extendValue + output[extendKey];
                }

                break;
            case 'function':
                var userEvent = output[extendKey] || function () {};
                output[extendKey] = function () {
                    var command = {
                        stopTriggerSwitch: false
                    };
                    command.stopTrigger = function () {
                        command.stopTriggerSwitch = true;
                    };

                    for (var _len = arguments.length, arg = Array(_len), _key = 0; _key < _len; _key++) {
                        arg[_key] = arguments[_key];
                    }

                    extendValue.apply(command, arg);
                    if (!command.stopTriggerSwitch) {
                        userEvent.apply({}, arg);
                    }
                };
                break;
            case 'object':
                if (Array.isArray(extendValue)) {
                    output[extendKey] = extendValue.concat(output[extendKey]);
                } else {
                    output[extendKey] = (0, _safeExtend2.default)(true, extendValue, output[extendKey]);
                }
                break;
            default:
                output[extendKey] = extendValue;
        }
    });
    var propsKeys = Object.keys(output);
    var unknownKeys = propsKeys.filter(function (key) {
        if (settings.ignore.indexOf(key) !== -1) {
            return true;
        }
        if (eventNameKeys.indexOf(key) !== -1) {
            return false;
        }
        var item = props[key];
        if (allKeys.indexOf(key) !== -1) {
            if (reactNameKeys.indexOf(key) == -1) {
                // output['className'] = props['class']
                output[_possibleStandardNames2.default[key]] = props[key];
                delete output[key];
                console.warn("react-spread-props(npm): \r\n\t\"" + key + "\" converted to \"" + _possibleStandardNames2.default[key] + "\" \r\n\t You should use \"" + _possibleStandardNames2.default[key] + "!\"");
            }
        } else {
            return true;
        }
    });
    unknownKeys.forEach(function (key) {
        delete output[key];
    });
    return output;
}

module.exports = reactSpreadProps;